{% from "question/macro.njk" import question with context %}
{% from "faq/macro.njk" import faq %}

{% macro autocompleteQuestion(config) %}
    {% set id = config.id if config.id else config.name %}
    {% set inputId = id + "-autocomplete" %}
    {% set errorMessageId = id + "-error" %}
    {% set questionHeadingId = id + "-heading" %}
    {% set faqId = id + "-faq" %}
    {% set faqIdSecondary = id + "-faq-secondary" %}
    {% set value=config.value or risk[config.name] %}
    {% set errorMessage=config.errorMessage or errors[config.name].msg %}
    {% set placeholder=config.placeholder or "Please select…" %}
    {% set pii = true if not config.pii | safe | length else config.pii %}

    {% call question(
        id=id,
        heading=config.heading and config.heading | safe,
        secondaryText=config.secondaryText and config.secondaryText | safe,
        validity="invalid" if errorMessage,
        variant=config.variant,
        labelFor=inputId,
        hidden=config.hidden,
        visibilityHidden=config.visibilityHidden
    ) %}
        {% for f in config.primaryFaqs %}
            {% call faq(
                question=f.question and f.question | safe,
                id=faqId,
                ariaDescribedby=questionHeadingId
            ) %}
                {{ f.answer | safe }}
            {% endcall %}
        {% endfor %}

        <div id="{{id}}-container" ctm-autocomplete>
            <!-- Элемент <input> -->
            <input aria-expanded="false" aria-owns="{{ inputId }}__listbox" aria-autocomplete="list"
                   autocomplete="off" class="autocomplete__input autocomplete__input--show-all-values"
                   id="{{ inputId }}" name="{{ config.name }}" placeholder="{{ placeholder }}" type="text"
                   role="combobox">
        </div>

        {% if errorMessage %}
            <p class="error-message" id="{{ errorMessageId }}">
                {{ errorMessage }}
            </p>
        {% endif %}

        {% for f in config.secondaryFaqs %}
            {% call faq(
                question=f.question and f.question | safe,
                id=faqIdSecondary,
                ariaDescribedby=questionHeadingId
            ) %}
                {{ f.answer | safe }}
            {% endcall %}
        {% endfor %}
        <script>
        document.addEventListener("DOMContentLoaded", () => {
          const items = {{ config.options | dump | safe }};
          const container = document.querySelector('#{{ id }}-container');
          const input = document.querySelector('#{{ inputId }}');
          
          // Создание элемента <ul>
          const ul = document.createElement('ul');
          ul.classList.add('autocomplete__menu', 'autocomplete__menu--overlay', 'autocomplete__menu--hidden');
          ul.setAttribute('id', '{{ inputId }}__listbox');
          ul.setAttribute('role', 'listbox');
          ul.setAttribute('aria-labelledby', '{{ inputId }}');
          ul.setAttribute('aria-describedby', '{{ errorMessageId }}');

          // Вставка <ul> после <input>
          input.insertAdjacentElement('afterend', ul);

          const init = (defaultValue) => {
            accessibleAutocomplete({
              element: container,
              id: '{{ inputId }}', // same as labelFor
              name: '{{ config.name }}',
              source: items.map(item => item.displayText),
              showAllValues: true,
              autoselect: false,
              enhanceSelectElement: false,
              displayMenu: 'overlay',
              defaultValue: defaultValue,
              placeholder: '{{ placeholder }}',
              menuAttributes: {'aria-labelledby': '{{ inputId }}', 'aria-describedby': '{{ errorMessageId }}'}
            });
          }

          container.reset = () => {
            while (container.firstChild) {
              container.removeChild(container.firstChild);
            }
            container.appendChild(input);
            input.insertAdjacentElement('afterend', ul);
            init('');
          };

          init('{{ value }}');
        });
        </script>
    {% endcall %}
{% endmacro %}

{% macro render(config) %}
    {{ autocompleteQuestion(config) }}
{% endmacro %}
