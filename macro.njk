{% macro autocompleteQuestion(config) %}
    {% set id = config.id if config.id else config.name %}
    {% set inputId = id + "-autocomplete" %}
    {% set errorMessageId = id + "-error" %}
    {% set questionHeadingId = id + "-heading" %}
    {% set faqId = id + "-faq" %}
    {% set faqIdSecondary = id + "-faq-secondary" %}
    {% set value = config.value or risk[config.name] %}
    {% set errorMessage = config.errorMessage or errors[config.name].msg %}
    {% set placeholder = config.placeholder or "Please selectâ€¦" %}
    {% set pii = true if not config.pii | safe | length else config.pii %}

    {% call question(
        id=id,
        heading=config.heading and config.heading | safe,
        secondaryText=config.secondaryText and config.secondaryText | safe,
        validity="invalid" if errorMessage,
        variant=config.variant,
        labelFor=inputId,
        hidden=config.hidden,
        visibilityHidden=config.visibilityHidden
    ) %}
        {% for f in config.primaryFaqs %}
            {% call faq(
                question=f.question and f.question | safe,
                id=faqId,
                ariaDescribedby=questionHeadingId
            ) %}
                {{ f.answer | safe }}
            {% endcall %}
        {% endfor %}

        <div id="{{ id }}-container" ctm-autocomplete></div>

        {% if errorMessage %}
            <p class="error-message" id="{{ errorMessageId }}">
                {{ errorMessage }}
            </p>
        {% endif %}

        {% for f in config.secondaryFaqs %}
            {% call faq(
                question=f.question and f.question | safe,
                id=faqIdSecondary,
                ariaDescribedby=questionHeadingId
            ) %}
                {{ f.answer | safe }}
            {% endcall %}
        {% endfor %}

        <script>
        document.addEventListener("DOMContentLoaded", function () {
          const autocompleteElement = document.querySelector('#{{ id }}-container');
          if (!autocompleteElement.hasAttribute('data-autocomplete-initialized')) {
            const items = {{ config.options | dump | safe }};
            accessibleAutocomplete({
              element: autocompleteElement,
              id: '{{ inputId }}',
              name: '{{ config.name }}',
              source: items.map(item => item.displayText),
              showAllValues: true,
              autoselect: false,
              enhanceSelectElement: false,
              displayMenu: 'overlay',
              defaultValue: '{{ value }}',
              placeholder: '{{ placeholder }}',
              menuAttributes: {'aria-labelledby': '{{ inputId }}', 'aria-describedby': '{{ errorMessageId }}'}
            });
            autocompleteElement.setAttribute('data-autocomplete-initialized', 'true');
          }
        });
        </script>
    {% endcall %}
{% endmacro %}

{% macro render(config) %}
    {{ autocompleteQuestion(config) }}
{% endmacro %}
