{% from "question/macro.njk" import question with context %}
{% from "faq/macro.njk" import faq %}

{% macro autocompleteQuestion(config) %}
    {% set id = config.id if config.id else config.name %}
    {% set inputId = id + "-autocomplete" %}
    {% set errorMessageId = id + "-error" %}
    {% set questionHeadingId = id + "-heading" %}
    {% set faqId = id + "-faq" %}
    {% set faqIdSecondary = id + "-faq-secondary" %}
    {% set value=config.value or risk[config.name] %}
    {% set errorMessage=config.errorMessage or errors[config.name].msg %}
    {% set placeholder=config.placeholder or "Please selectâ€¦" %}
    {% set pii = true if not config.pii | safe | length else config.pii %}

    {% call question(
        id=id,
        heading=config.heading and config.heading | safe,
        secondaryText=config.secondaryText and config.secondaryText | safe,
        validity="invalid" if errorMessage,
        variant=config.variant,
        labelFor=inputId,
        hidden=config.hidden,
        visibilityHidden=config.visibilityHidden
    ) %}
        {% for f in config.primaryFaqs %}
            {% call faq(
                question=f.question and f.question | safe,
                id=faqId,
                ariaDescribedby=questionHeadingId
            ) %}
                {{ f.answer | safe }}
            {% endcall %}
        {% endfor %}

        <div id="{{id}}-container" ctm-autocomplete>
            <input id="{{ inputId }}" name="{{ config.name }}" type="text" 
                   placeholder="{{ placeholder }}" 
                   class="autocomplete__input autocomplete__input--show-all-values"
                   aria-expanded="false" aria-owns="{{ inputId }}__listbox" aria-autocomplete="list"
                   role="combobox" autocomplete="off">
            <ul class="autocomplete__menu autocomplete__menu--overlay autocomplete__menu--hidden"
                id="{{ inputId }}__listbox" role="listbox"
                aria-labelledby="{{ inputId }}" aria-describedby="{{ errorMessageId }}">
            </ul>
        </div>

        {% if errorMessage %}
            <p class="error-message" id="{{ errorMessageId }}">
                {{ errorMessage }}
            </p>
        {% endif %}

        {% for f in config.secondaryFaqs %}
            {% call faq(
                question=f.question and f.question | safe,
                id=faqIdSecondary,
                ariaDescribedby=questionHeadingId
            ) %}
                {{ f.answer | safe }}
            {% endcall %}
        {% endfor %}
        <script>
        document.addEventListener("DOMContentLoaded", function () {
            const inputElement = document.querySelector('#{{ inputId }}');
            const listElement = document.querySelector('#{{ inputId }}__listbox');
            const autocompleteElement = document.querySelector('#{{ id }}-container');

            // Ensure that input and list elements are correctly positioned in the DOM.
            const init = (defaultValue) => {
                accessibleAutocomplete({
                    element: autocompleteElement,
                    id: '{{ inputId }}', // same as labelFor
                    name: '{{ config.name }}',
                    source: {{ config.options | dump | safe }},
                    showAllValues: true,
                    autoselect: false,
                    enhanceSelectElement: false,
                    displayMenu: 'overlay',
                    defaultValue: defaultValue,
                    placeholder: '{{ placeholder }}',
                    menuAttributes: {
                        'aria-labelledby': '{{ inputId }}', 
                        'aria-describedby': '{{ errorMessageId }}'
                    }
                });
            };

            inputElement.addEventListener('keydown', function(event) {
                if (event.key === "ArrowDown") {
                    event.preventDefault(); // Prevent scrolling
                    const firstOption = listElement.querySelector('li');
                    if (firstOption) firstOption.focus(); // Move focus to the first list item
                }
            });

            listElement.addEventListener('keydown', function(event) {
                if (event.key === "ArrowUp" && document.activeElement === listElement.firstChild) {
                    event.preventDefault();
                    inputElement.focus(); // Move focus back to the input on pressing 'up' on the first item
                }
            });

            autocompleteElement.reset = () => {
                while (autocompleteElement.firstChild) {
                    autocompleteElement.firstChild.remove();
                }
                init('');
            };

            init('{{ value }}');
        });
        </script>
    {% endcall %}
{% endmacro %}

{% macro render(config) %}
    {{ autocompleteQuestion(config) }}
{% endmacro %}
