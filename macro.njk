<script>
  document.addEventListener("DOMContentLoaded", () => {
    const items = {{ config.options | dump | safe }};
    const autocompleteElement = document.querySelector('#{{ id }}-container');
    const input = document.createElement('input');
    input.setAttribute('id', '{{ inputId }}');
    input.setAttribute('name', '{{ config.name }}');
    input.setAttribute('type', 'text');
    input.setAttribute('placeholder', '{{ placeholder }}');
    input.classList.add('autocomplete__input', 'autocomplete__input--show-all-values');
    input.setAttribute('role', 'combobox');
    input.setAttribute('aria-expanded', 'false');
    input.setAttribute('aria-controls', '{{ inputId }}__listbox');
    autocompleteElement.appendChild(input);

    const ul = document.createElement('ul');
    ul.setAttribute('id', '{{ inputId }}__listbox');
    ul.setAttribute('role', 'listbox');
    ul.setAttribute('aria-labelledby', '{{ inputId }}');
    ul.classList.add('autocomplete__menu', 'autocomplete__menu--overlay', 'autocomplete__menu--hidden');
    autocompleteElement.appendChild(ul);

    const init = (defaultValue) => {
      accessibleAutocomplete({
        element: autocompleteElement,
        id: '{{ inputId }}',
        name: '{{ config.name }}',
        source: items.map(item => item.displayText),
        showAllValues: true,
        autoselect: false,
        enhanceSelectElement: false,
        displayMenu: 'overlay',
        defaultValue: defaultValue,
        placeholder: '{{ placeholder }}',
        menuAttributes: {'aria-labelledby': '{{ inputId }}', 'aria-describedby': '{{ errorMessageId }}'},
        onConfirm: (val) => {
          input.setAttribute('aria-expanded', 'false');
          ul.classList.add('autocomplete__menu--hidden');
          input.focus();
        },
        onOpen: () => {
          input.setAttribute('aria-expanded', 'true');
          ul.classList.remove('autocomplete__menu--hidden');
          if (ul.firstChild) {
            ul.firstChild.setAttribute('tabindex', '-1');
            ul.firstChild.focus();
          }
        },
        onClose: () => {
          input.setAttribute('aria-expanded', 'false');
          ul.classList.add('autocomplete__menu--hidden');
          input.focus();
        }
      });
    };

    init('{{ value }}');
  });
</script>
